using UnityEngine;
using System.Collections;

public class Grenade : MonoBehaviour
{
    private WeaponData _weaponData;
    private bool _hasExploded;
    private Vector3 _startPosition;
    private Vector3 _targetPosition;
    private float _throwDuration;
    private float _currentTime;
    private float _arcHeight;
    private bool _isMoving;
    private GameObject _owner; // –í–ª–∞–¥–µ–ª–µ—Ü –≥—Ä–∞–Ω–∞—Ç—ã
    
    // –î–ª—è –∏–≥—Ä–æ–∫–∞ –Ω—É–∂–Ω–∞ –ø–æ–∑–∏—Ü–∏—è —Ü–µ–ª–∏
    private static Vector3 _lastPlayerAimPosition;
    
    // –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–∏ –∏–≥—Ä–æ–∫–∞
    public static void SetPlayerAimPosition(Vector3 aimPosition)
    {
        _lastPlayerAimPosition = aimPosition;
        Debug.Log($"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–æ—á–∫–∞ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞: {_lastPlayerAimPosition}");
    }

    private void Awake()
    {
        // –£–¥–∞–ª—è–µ–º Rigidbody, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
        Rigidbody rb = GetComponent<Rigidbody>();
        if (rb != null)
        {
            Destroy(rb);
        }
    }

    public void Initialize(WeaponData weaponData, Vector3 throwDirection, float throwDistance, GameObject owner)
    {
        if (weaponData == null)
        {
            Debug.LogError("WeaponData is null!");
            return;
        }

        _weaponData = weaponData;
        _hasExploded = false;
        _owner = owner;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        _startPosition = transform.position;
        
        // üî¥ –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¶–ï–õ–ï–í–û–ô –¢–û–ß–ö–ò üî¥
        if (_owner != null)
        {
            if (_owner.CompareTag("Enemy"))
            {
                // ====== –õ–û–ì–ò–ö–ê –î–õ–Ø –í–†–ê–ì–ê ======
                PlayerController player = FindObjectOfType<PlayerController>();
                if (player != null)
                {
                    // –í–µ–∫—Ç–æ—Ä –æ—Ç –≤—Ä–∞–≥–∞ –∫ –∏–≥—Ä–æ–∫—É
                    Vector3 dirToPlayer = (player.transform.position - _owner.transform.position).normalized;
                    dirToPlayer.y = 0; // –£–±–∏—Ä–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é —Å–æ—Å—Ç–∞–≤–ª—è—é—â—É—é
                    
                    // –í—ã—á–∏—Å–ª—è–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –¥–æ –∏–≥—Ä–æ–∫–∞
                    float distToPlayer = Vector3.Distance(_owner.transform.position, player.transform.position);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
                    Vector3 targetLeadPosition = player.transform.position;
                    if (player.IsMoving())
                    {
                        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
                        Rigidbody playerRb = player.GetComponent<Rigidbody>();
                        Vector3 playerVelocity = playerRb != null ? playerRb.linearVelocity.normalized : Vector3.zero;
                        
                        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å —á–µ—Ä–µ–∑ Rigidbody, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                        if (playerVelocity.magnitude < 0.1f)
                        {
                            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–º–æ—Ç—Ä–∏—Ç –∏–≥—Ä–æ–∫
                            playerVelocity = player.transform.forward.normalized;
                        }
                        
                        targetLeadPosition += playerVelocity * 1.5f; // –ü—Ä–µ–¥—É–≥–∞–¥—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
                    }
                    
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é –ø–æ–∑–∏—Ü–∏—é - –ª–∏–±–æ —Ç–æ—á–Ω–æ –ø–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞, –ª–∏–±–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞–ª—å–Ω–æ—Å—Ç—å
                    if (distToPlayer <= throwDistance)
                    {
                        // –ò–≥—Ä–æ–∫ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ—Å—è–≥–∞–µ–º–æ—Å—Ç–∏ - —Ü–µ–ª–∏–º—Å—è –ø—Ä—è–º–æ –≤ –Ω–µ–≥–æ
                        _targetPosition = targetLeadPosition;
                        Debug.Log($"–ì—Ä–∞–Ω–∞—Ç–∞ –≤—Ä–∞–≥–∞: —Ü–µ–ª—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ—Å—è–≥–∞–µ–º–æ—Å—Ç–∏! {_targetPosition}");
                    }
                    else
                    {
                        // –ò–≥—Ä–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ - –±—Ä–æ—Å–∞–µ–º –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –≤ –µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
                        _targetPosition = _owner.transform.position + dirToPlayer * throwDistance;
                        Debug.Log($"–ì—Ä–∞–Ω–∞—Ç–∞ –≤—Ä–∞–≥–∞: —Ü–µ–ª—å —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {_targetPosition}");
                    }
                }
                else
                {
                    // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É
                    _targetPosition = _startPosition + throwDirection * throwDistance;
                    Debug.Log($"–ì—Ä–∞–Ω–∞—Ç–∞ –≤—Ä–∞–≥–∞: –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ");
                }
            }
            else if (_owner.CompareTag("Player"))
            {
                // ====== –õ–û–ì–ò–ö–ê –î–õ–Ø –ò–ì–†–û–ö–ê ======
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
                if (_lastPlayerAimPosition != Vector3.zero)
                {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞
                    Vector3 dirToTarget = (_lastPlayerAimPosition - _startPosition).normalized;
                    float distToTarget = Vector3.Distance(_startPosition, _lastPlayerAimPosition);
                    
                    // –ï—Å–ª–∏ —Ç–æ—á–∫–∞ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ—Å—è–≥–∞–µ–º–æ—Å—Ç–∏
                    if (distToTarget <= throwDistance)
                    {
                        _targetPosition = _lastPlayerAimPosition;
                        Debug.Log($"–ì—Ä–∞–Ω–∞—Ç–∞ –∏–≥—Ä–æ–∫–∞: —Ü–µ–ª—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ—Å—è–≥–∞–µ–º–æ—Å—Ç–∏! {_targetPosition}");
                    }
                    else
                    {
                        // –¶–µ–ª—å —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ - –±—Ä–æ—Å–∞–µ–º –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
                        _targetPosition = _startPosition + dirToTarget * throwDistance;
                        Debug.Log($"–ì—Ä–∞–Ω–∞—Ç–∞ –∏–≥—Ä–æ–∫–∞: —Ü–µ–ª—å —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {_targetPosition}");
                    }
                    
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ—á–∫—É –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    _lastPlayerAimPosition = Vector3.zero;
                }
                else
                {
                    // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–∫–∏ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                    _targetPosition = _startPosition + throwDirection * throwDistance;
                    Debug.Log($"–ì—Ä–∞–Ω–∞—Ç–∞ –∏–≥—Ä–æ–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Ü–µ–ª–∏");
                }
            }
            else
            {
                // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                _targetPosition = _startPosition + throwDirection * throwDistance;
                Debug.Log($"–ì—Ä–∞–Ω–∞—Ç–∞: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {_owner.name}");
            }
        }
        else
        {
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞, –µ—Å–ª–∏ –Ω–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞
            _targetPosition = _startPosition + throwDirection * throwDistance;
            Debug.Log($"–ì—Ä–∞–Ω–∞—Ç–∞: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ (–Ω–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞)");
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
        float flightDistance = Vector3.Distance(_startPosition, _targetPosition);
        _arcHeight = CalculateArcHeight(flightDistance);
        _throwDuration = CalculateFlightDuration(flightDistance);
        _currentTime = 0f;
        _isMoving = true;
        
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
        IgnoreCollisionsWithOwner();
        
        Debug.Log($"–ì—Ä–∞–Ω–∞—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: —Å—Ç–∞—Ä—Ç={_startPosition}, —Ü–µ–ª—å={_targetPosition}, –≤–ª–∞–¥–µ–ª–µ—Ü={_owner?.name}, –¥–∞–ª—å–Ω–æ—Å—Ç—å={flightDistance:F2}–º, –≤—ã—Å–æ—Ç–∞={_arcHeight:F2}–º, –≤—Ä–µ–º—è={_throwDuration:F2}—Å");
    }
    
    // –û—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–ª–ª–∏–∑–∏–π —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
    private void IgnoreCollisionsWithOwner()
    {
        if (_owner == null) return;
        
        Collider grenadeCollider = GetComponent<Collider>();
        if (grenadeCollider == null) return;
        
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
        Collider[] ownerColliders = _owner.GetComponentsInChildren<Collider>();
        foreach (Collider ownerCollider in ownerColliders)
        {
            Physics.IgnoreCollision(grenadeCollider, ownerCollider);
        }
        
        // –ï—Å–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –≤—Ä–∞–≥, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ —Å–æ –≤—Å–µ–º–∏ –≤—Ä–∞–≥–∞–º–∏
        if (_owner.CompareTag("Enemy"))
        {
            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤ –Ω–∞ —Å—Ü–µ–Ω–µ
            GameObject[] enemies = GameObject.FindGameObjectsWithTag("Enemy");
            foreach (GameObject enemy in enemies)
            {
                // –ù–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π (—Ö–æ—Ç—è –º—ã —É–∂–µ —ç—Ç–æ —Å–¥–µ–ª–∞–ª–∏ –≤—ã—à–µ)
                if (enemy == _owner) continue;
                
                Collider[] enemyColliders = enemy.GetComponentsInChildren<Collider>();
                foreach (Collider enemyCollider in enemyColliders)
                {
                    Physics.IgnoreCollision(grenadeCollider, enemyCollider);
                }
            }
        }
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—ã—Å–æ—Ç—É –¥—É–≥–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ–ª–µ—Ç–∞
    private float CalculateArcHeight(float distance)
    {
        // –ö–æ—Ä–æ—Ç–∫–∏–µ –±—Ä–æ—Å–∫–∏ - –æ—á–µ–Ω—å –Ω–∏–∑–∫–∞—è –¥—É–≥–∞ (–ø–æ—á—Ç–∏ –ø—Ä—è–º–∞—è –ª–∏–Ω–∏—è)
        if (distance < 2f)
        {
            return Mathf.Lerp(0.2f, 0.5f, distance / 2f);
        }
        // –ö–æ—Ä–æ—Ç–∫–∏–µ –±—Ä–æ—Å–∫–∏ - –Ω–∏–∑–∫–∞—è –¥—É–≥–∞
        else if (distance < 5f)
        {
            return Mathf.Lerp(0.5f, 2f, (distance - 2f) / 3f);
        }
        // –°—Ä–µ–¥–Ω–∏–µ –±—Ä–æ—Å–∫–∏ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥—É–≥–∞
        else if (distance < 12f)
        {
            return 2f;
        }
        // –î–∞–ª—å–Ω–∏–µ –±—Ä–æ—Å–∫–∏ - –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∞—è –¥—É–≥–∞
        else
        {
            return Mathf.Lerp(2f, 4.5f, (distance - 12f) / 8f);
        }
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
    private float CalculateFlightDuration(float distance)
    {
        // –ö–æ—Ä–æ—Ç–∫–∏–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ - –±—ã—Å—Ç—Ä—ã–π –ø–æ–ª–µ—Ç
        if (distance < 3f)
        {
            return Mathf.Lerp(0.3f, 0.7f, distance / 3f);
        }
        // –°—Ä–µ–¥–Ω–∏–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
        else if (distance < 10f)
        {
            return 0.7f + Mathf.Sqrt(distance - 3f) * 0.12f;
        }
        // –î–∞–ª—å–Ω–∏–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ - –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–ª–µ—Ç
        else
        {
            return 1.1f + Mathf.Sqrt(distance - 10f) * 0.18f;
        }
    }

    private void Update()
    {
        if (!_isMoving || _hasExploded) return;

        _currentTime += Time.deltaTime;
        float normalizedTime = _currentTime / _throwDuration;

        if (normalizedTime >= 1f)
        {
            // –î–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏
            transform.position = _targetPosition;
            _isMoving = false;
            Explode(); // –í–∑—Ä—ã–≤–∞–µ–º—Å—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏
            return;
        }

        // –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ –ø–∞—Ä–∞–±–æ–ª–∏—á–µ—Å–∫–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        Vector3 currentPos = Vector3.Lerp(_startPosition, _targetPosition, normalizedTime);
        float heightOffset = Mathf.Sin(normalizedTime * Mathf.PI) * _arcHeight;
        currentPos.y += heightOffset;

        transform.position = currentPos;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        transform.Rotate(Time.deltaTime * 180f, Time.deltaTime * 90f, 0);
        
        // –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        Debug.DrawLine(_startPosition, _targetPosition, Color.yellow);
    }

    private void OnCollisionEnter(Collision collision)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞
        if (_owner != null)
        {
            // –ï—Å–ª–∏ –≥—Ä–∞–Ω–∞—Ç–∞ –æ—Ç –∏–≥—Ä–æ–∫–∞, –æ–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –Ω–∞–Ω–æ—Å–∏—Ç—å —É—Ä–æ–Ω –∏–≥—Ä–æ–∫—É
            if (_owner.CompareTag("Player") && collision.gameObject.CompareTag("Player"))
            {
                return;
            }
        }

        if (!_hasExploded)
        {
            Explode();
        }
    }

    private void Explode()
    {
        if (_hasExploded) return;
        _hasExploded = true;
        
        Debug.Log($"–ì—Ä–∞–Ω–∞—Ç–∞ –≤–∑–æ—Ä–≤–∞–ª–∞—Å—å –≤ —Ç–æ—á–∫–µ {transform.position}");

        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –≤ —Ä–∞–¥–∏—É—Å–µ –≤–∑—Ä—ã–≤–∞
        Collider[] colliders = Physics.OverlapSphere(transform.position, _weaponData.explosionRadius);
        
        // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –≤–∑—Ä—ã–≤
        Vector3 explosionPos = transform.position;
        foreach (Collider hit in Physics.OverlapSphere(explosionPos, _weaponData.explosionRadius))
        {
            Rigidbody rb = hit.GetComponent<Rigidbody>();
            
            if (rb != null)
            {
                // –ù–µ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–∏–ª—É –∫ –∏–≥—Ä–æ–∫—É –∏ –≤—Ä–∞–≥–∞–º
                if (hit.CompareTag("Player") || hit.CompareTag("Enemy"))
                {
                    continue;
                }
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ –∫ –æ–±—ä–µ–∫—Ç–∞–º
                rb.AddExplosionForce(_weaponData.damage * 20f, explosionPos, _weaponData.explosionRadius, 
                    1.0f, ForceMode.Impulse);
            }
        }
        
        // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω –≤—Å–µ–º –æ–±—ä–µ–∫—Ç–∞–º –≤ —Ä–∞–¥–∏—É—Å–µ
        foreach (Collider collider in colliders)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞
            if (_owner != null)
            {
                // –ï—Å–ª–∏ –≥—Ä–∞–Ω–∞—Ç–∞ –æ—Ç –≤—Ä–∞–≥–∞, –æ–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –Ω–∞–Ω–æ—Å–∏—Ç—å —É—Ä–æ–Ω –¥—Ä—É–≥–∏–º –≤—Ä–∞–≥–∞–º
                if (_owner.CompareTag("Enemy") && collider.gameObject.CompareTag("Enemy"))
                {
                    continue;
                }
                
                // –ï—Å–ª–∏ –≥—Ä–∞–Ω–∞—Ç–∞ –æ—Ç –∏–≥—Ä–æ–∫–∞, –æ–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –Ω–∞–Ω–æ—Å–∏—Ç—å —É—Ä–æ–Ω –∏–≥—Ä–æ–∫—É
                if (_owner.CompareTag("Player") && collider.gameObject.CompareTag("Player"))
                {
                    continue;
                }
            }

            // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω –≤—Å–µ–º –æ–±—ä–µ–∫—Ç–∞–º –≤ —Ä–∞–¥–∏—É—Å–µ
            IDamageable damageable = collider.GetComponent<IDamageable>();
            if (damageable != null)
            {
                // –í—ã—á–∏—Å–ª—è–µ–º —É—Ä–æ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                float distance = Vector3.Distance(transform.position, collider.transform.position);
                
                // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ —É—Ä–æ–Ω–∞ —Å –±–æ–ª–µ–µ —Å–∏–ª—å–Ω—ã–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–º –ø–æ—Ä–∞–∂–µ–Ω–∏–µ–º
                float damagePercent;
                if (distance < _weaponData.explosionRadius * 0.3f)
                {
                    // –í —Ü–µ–Ω—Ç—Ä–µ –≤–∑—Ä—ã–≤–∞ - –ø–æ–ª–Ω—ã–π —É—Ä–æ–Ω
                    damagePercent = 1.0f;
                }
                else
                {
                    // –î–∞–ª—å—à–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ - —Å–ø–∞–¥–∞—é—â–∏–π —É—Ä–æ–Ω –ø–æ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–π —Ñ–æ—Ä–º—É–ª–µ
                    float normalizedDistance = (distance - _weaponData.explosionRadius * 0.3f) / 
                                               (_weaponData.explosionRadius * 0.7f);
                    damagePercent = 1.0f - normalizedDistance * normalizedDistance;
                }
                
                float damage = _weaponData.damage * damagePercent;
                
                damageable.TakeDamage(damage);
                Debug.Log($"–ù–∞–Ω–µ—Å–µ–Ω —É—Ä–æ–Ω {damage:F1} –æ–±—ä–µ–∫—Ç—É {collider.gameObject.name} (–¥–∏—Å—Ç: {distance:F2}, %: {damagePercent:P0})");
            }
        }

        // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤–∑—Ä—ã–≤–∞
        if (_weaponData.explosionEffect != null)
        {
            GameObject effect = Instantiate(_weaponData.explosionEffect, transform.position, Quaternion.identity);
            Destroy(effect, 1f); // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
        }

        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –≤–∑—Ä—ã–≤–∞
        if (_weaponData.explosionSound != null)
        {
            AudioSource.PlayClipAtPoint(_weaponData.explosionSound, transform.position);
        }

        Destroy(gameObject);
    }

    private void OnDrawGizmos()
    {
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –∏–≥—Ä—ã
        if (!Application.isPlaying) return;
        
        // –†–∞–¥–∏—É—Å –≤–∑—Ä—ã–≤–∞
        Gizmos.color = Color.red;
        Gizmos.DrawWireSphere(transform.position, _weaponData?.explosionRadius ?? 1f);
        
        // –ü—É—Ç—å –ø–æ–ª–µ—Ç–∞
        if (_targetPosition != Vector3.zero)
        {
            Gizmos.color = Color.yellow;
            Gizmos.DrawWireSphere(_targetPosition, 0.3f);
            Gizmos.DrawLine(_startPosition, _targetPosition);
            
            // –¢–µ–∫—É—â–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è
            float currentHeight = Mathf.Sin((_currentTime / _throwDuration) * Mathf.PI) * _arcHeight;
            Gizmos.color = Color.green;
            Gizmos.DrawRay(transform.position, Vector3.up * currentHeight);
        }
    }
} 